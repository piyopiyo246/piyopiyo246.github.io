var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(document).ready(function() {
  var FocusManager, changeText, clearButton, clearText, focusManager, highlight, searchInput;
  searchInput = $('[data-app="search-input"]');
  clearButton = $('[data-app="search-clear"]');
  searchInput.val("");
  clearButton.hide();
  FocusManager = (function() {
    function FocusManager() {
      this.viewButtons = bind(this.viewButtons, this);
      this.viewStatus = bind(this.viewStatus, this);
      this.hideButtons = bind(this.hideButtons, this);
      this.focusRight = bind(this.focusRight, this);
      this.focusLeft = bind(this.focusLeft, this);
      this.setFocus = bind(this.setFocus, this);
      this.stop = bind(this.stop, this);
      this.start = bind(this.start, this);
      this.currentIndex = 0;
      this.importants = [];
      this.left = $('[data-app="search-left"]');
      this.right = $('[data-app="search-right"]');
      this.status = $('[data-role="search-status"]');
      this.left.click(this.focusLeft);
      this.right.click(this.focusRight);
      this.hideButtons();
    }

    FocusManager.prototype.start = function(importants) {
      this.importants = importants;
      this.currentIndex = 0;
      this.setFocus();
      return this.status.show();
    };

    FocusManager.prototype.stop = function() {
      this.importants.removeClass('active');
      this.importants = [];
      this.currentIndex = 0;
      return this.hideButtons();
    };

    FocusManager.prototype.setFocus = function() {
      var position, target;
      this.viewStatus();
      this.viewButtons();
      this.importants.removeClass('active');
      target = $(this.importants[this.currentIndex]);
      target.addClass("active");
      position = target.offset().top - 60;
      return $('html,body').animate({
        scrollTop: position
      }, 'fast');
    };

    FocusManager.prototype.focusLeft = function() {
      if (this.currentIndex > 0) {
        this.currentIndex = this.currentIndex - 1;
      }
      return this.setFocus();
    };

    FocusManager.prototype.focusRight = function() {
      if (this.currentIndex < (this.importants.length - 1)) {
        this.currentIndex = this.currentIndex + 1;
      }
      return this.setFocus();
    };

    FocusManager.prototype.hideButtons = function() {
      this.left.hide();
      this.right.hide();
      return this.status.hide();
    };

    FocusManager.prototype.viewStatus = function() {
      var text;
      text = (this.currentIndex + 1) + " / " + this.importants.length;
      this.status.empty();
      return this.status.append(text);
    };

    FocusManager.prototype.viewButtons = function() {
      if (this.currentIndex !== 0 && this.importants.length !== 0) {
        this.left.show();
      } else {
        this.left.hide();
      }
      if (this.importants.lehth !== 0 && (this.importants.length - 1) > this.currentIndex) {
        return this.right.show();
      } else {
        return this.right.hide();
      }
    };

    return FocusManager;

  })();
  focusManager = new FocusManager();
  highlight = function(tgt) {
    var higlight, target, text;
    text = $(tgt.currentTarget).val();
    higlight = {
      element: 'em',
      className: 'important'
    };
    $(".important").removeClass('active');
    target = $('[data-role="inpage-search-target"]');
    target.unhighlight(higlight);
    return target.highlight(text, higlight);
  };
  changeText = function(tgt) {
    highlight(tgt);
    if (searchInput.val() !== "") {
      clearButton.show();
      return focusManager.start($(".important"));
    } else {
      clearButton.hide();
      return focusManager.stop();
    }
  };
  clearText = function() {
    searchInput.val("");
    return searchInput.keyup();
  };
  searchInput.keyup(changeText);
  return clearButton.click(clearText);
});

// ---
// generated by coffee-script 1.9.2